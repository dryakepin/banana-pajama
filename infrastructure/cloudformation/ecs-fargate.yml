AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Fargate cluster and services for Banana Pajama Zombie Shooter'

Parameters:
  ProjectName:
    Type: String
    Default: banana-pajama
    Description: Name of the project
  
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name

  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Database password

  SessionSecret:
    Type: String
    NoEcho: true
    MinLength: 32
    Description: Session secret for JWT tokens

  DomainName:
    Type: String
    Default: localhost
    Description: Domain name for CORS configuration

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ProjectName}-${Environment}-cluster"
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 4
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-cluster"
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Groups
  ServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}-${Environment}-server"
      RetentionInDays: 14

  ClientLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}-${Environment}-client"
      RetentionInDays: 14

  NginxLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}-${Environment}-nginx"
      RetentionInDays: 14

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DatabaseSecret
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-ecs-execution-role"
        - Key: Environment
          Value: !Ref Environment

  # ECS Task Role
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-ecs-task-role"
        - Key: Environment
          Value: !Ref Environment

  # Secrets Manager for Database Password
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-database-secret"
      Description: Database credentials for Banana Pajama
      SecretString: !Sub 
        - |
          {
            "username": "postgres",
            "password": "${DatabasePassword}",
            "engine": "postgres",
            "host": "${DatabaseEndpoint}",
            "port": 5432,
            "dbname": "banana_pajama"
          }
        - DatabaseEndpoint:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-db-endpoint"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-database-secret"
        - Key: Environment
          Value: !Ref Environment

  # Application Secrets
  ApplicationSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-app-secrets"
      Description: Application secrets for Banana Pajama
      SecretString: !Sub |
        {
          "session_secret": "${SessionSecret}",
          "jwt_secret": "${SessionSecret}",
          "cors_origin": "https://${DomainName}"
        }
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-app-secrets"
        - Key: Environment
          Value: !Ref Environment

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ProjectName}-${Environment}-app"
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        # Nginx Reverse Proxy
        - Name: nginx
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-nginx:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
            - ContainerPort: 443
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref NginxLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nginx
          HealthCheck:
            Command:
              - CMD-SHELL
              - "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          DependsOn:
            - ContainerName: client
              Condition: HEALTHY
            - ContainerName: server
              Condition: HEALTHY

        # Game Client
        - Name: client
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-client:latest"
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ClientLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: client
          HealthCheck:
            Command:
              - CMD-SHELL
              - "wget --no-verbose --tries=1 --spider http://localhost || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

        # API Server
        - Name: server
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-server:latest"
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: "3000"
          Secrets:
            - Name: DB_HOST
              ValueFrom: !Sub "${DatabaseSecret}:host::"
            - Name: DB_PORT
              ValueFrom: !Sub "${DatabaseSecret}:port::"
            - Name: DB_NAME
              ValueFrom: !Sub "${DatabaseSecret}:dbname::"
            - Name: DB_USER
              ValueFrom: !Sub "${DatabaseSecret}:username::"
            - Name: DB_PASSWORD
              ValueFrom: !Sub "${DatabaseSecret}:password::"
            - Name: SESSION_SECRET
              ValueFrom: !Sub "${ApplicationSecrets}:session_secret::"
            - Name: JWT_SECRET
              ValueFrom: !Sub "${ApplicationSecrets}:jwt_secret::"
            - Name: CORS_ORIGIN
              ValueFrom: !Sub "${ApplicationSecrets}:cors_origin::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ServerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: server
          HealthCheck:
            Command:
              - CMD
              - node
              - healthcheck.js
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-task-definition"
        - Key: Environment
          Value: !Ref Environment

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${ProjectName}-${Environment}-service"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !If [IsProduction, 2, 1]
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub "${ProjectName}-${Environment}-ecs-sg-id"
          Subnets:
            - Fn::ImportValue: !Sub "${ProjectName}-${Environment}-private-subnet-1"
            - Fn::ImportValue: !Sub "${ProjectName}-${Environment}-private-subnet-2"
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup
      HealthCheckGracePeriodSeconds: 120
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-service"
        - Key: Environment
          Value: !Ref Environment

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-alb"
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - Fn::ImportValue: !Sub "${ProjectName}-${Environment}-alb-sg-id"
      Subnets:
        - Fn::ImportValue: !Sub "${ProjectName}-${Environment}-public-subnet-1"
        - Fn::ImportValue: !Sub "${ProjectName}-${Environment}-public-subnet-2"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-alb"
        - Key: Environment
          Value: !Ref Environment

  # ALB Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-tg"
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-${Environment}-vpc-id"
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-tg"
        - Key: Environment
          Value: !Ref Environment

  # ALB Listener (HTTP)
  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: !If
        - HasCustomDomain
        - - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: 443
              Host: "#{host}"
              Path: "/#{path}"
              Query: "#{query}"
              StatusCode: HTTP_301
        - - Type: forward
            TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALB Listener (HTTPS)
  ALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCustomDomain
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificate

  # SSL Certificate
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-ssl-cert"
        - Key: Environment
          Value: !Ref Environment

# Conditions
Conditions:
  IsProduction: !Equals [!Ref Environment, production]
  HasCustomDomain: !Not [!Equals [!Ref DomainName, ""]]

Outputs:
  ECSCluster:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${ProjectName}-${Environment}-ecs-cluster"

  LoadBalancerDNS:
    Description: Application Load Balancer DNS name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${ProjectName}-${Environment}-alb-dns"

  ServiceName:
    Description: ECS Service Name
    Value: !Ref ECSService
    Export:
      Name: !Sub "${ProjectName}-${Environment}-ecs-service"
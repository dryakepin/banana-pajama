AWSTemplateFormatVersion: '2010-09-09'
Description: 'Full game deployment for Banana Pajama Zombie Shooter'

Parameters:
  ProjectName:
    Type: String
    Default: banana-pajama
    Description: Name of the project
  
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name

  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Database password

  SessionSecret:
    Type: String
    NoEcho: true
    MinLength: 32
    Description: Session secret for JWT tokens

Resources:
  # Database Secret
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-database-secret"
      Description: Database credentials for Banana Pajama
      SecretString: !Sub 
        - |
          {
            "username": "postgres",
            "password": "${DatabasePassword}",
            "engine": "postgres",
            "host": "${DatabaseEndpoint}",
            "port": 5432,
            "dbname": "banana_pajama"
          }
        - DatabaseEndpoint:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-db-endpoint"

  # Application Secrets
  ApplicationSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-app-secrets"
      Description: Application secrets for Banana Pajama
      SecretString: !Sub |
        {
          "session_secret": "${SessionSecret}",
          "jwt_secret": "${SessionSecret}",
          "cors_origin": "http://${LoadBalancerDNS}"
        }

  # Task Execution Role with Secrets Manager permissions
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 
                  - !Ref DatabaseSecret
                  - !Ref ApplicationSecrets

  # Game Task Definition with all containers
  GameTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ProjectName}-${Environment}-game"
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        # Nginx Reverse Proxy
        - Name: nginx
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-nginx:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ProjectName}-${Environment}-nginx"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nginx
              awslogs-create-group: "true"
          HealthCheck:
            Command:
              - CMD-SHELL
              - "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          DependsOn:
            - ContainerName: client
              Condition: HEALTHY
            - ContainerName: server
              Condition: HEALTHY

        # Game Client (Phaser.js)
        - Name: client
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-client:latest"
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ProjectName}-${Environment}-client"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: client
              awslogs-create-group: "true"
          HealthCheck:
            Command:
              - CMD-SHELL
              - "wget --no-verbose --tries=1 --spider http://localhost || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

        # API Server (Node.js)
        - Name: server
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-server:latest"
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: "3000"
          Secrets:
            - Name: DB_HOST
              ValueFrom: !Sub "${DatabaseSecret}:host::"
            - Name: DB_PORT
              ValueFrom: !Sub "${DatabaseSecret}:port::"
            - Name: DB_NAME
              ValueFrom: !Sub "${DatabaseSecret}:dbname::"
            - Name: DB_USER
              ValueFrom: !Sub "${DatabaseSecret}:username::"
            - Name: DB_PASSWORD
              ValueFrom: !Sub "${DatabaseSecret}:password::"
            - Name: SESSION_SECRET
              ValueFrom: !Sub "${ApplicationSecrets}:session_secret::"
            - Name: JWT_SECRET
              ValueFrom: !Sub "${ApplicationSecrets}:jwt_secret::"
            - Name: CORS_ORIGIN
              ValueFrom: !Sub "${ApplicationSecrets}:cors_origin::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ProjectName}-${Environment}-server"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: server
              awslogs-create-group: "true"
          HealthCheck:
            Command:
              - CMD
              - node
              - healthcheck.js
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # Update ECS Service to use new task definition
  GameService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${ProjectName}-${Environment}-service"
      Cluster:
        Fn::ImportValue: !Sub "${ProjectName}-${Environment}-ecs-cluster"
      TaskDefinition: !Ref GameTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub "${ProjectName}-${Environment}-ecs-sg-id"
          Subnets:
            - Fn::ImportValue: !Sub "${ProjectName}-${Environment}-public-subnet-1"
            - Fn::ImportValue: !Sub "${ProjectName}-${Environment}-public-subnet-2"
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-target-group"
      HealthCheckGracePeriodSeconds: 120
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true

Outputs:
  GameTaskDefinition:
    Description: Game task definition ARN
    Value: !Ref GameTaskDefinition

  GameService:
    Description: Game ECS service name
    Value: !Ref GameService

  DatabaseSecret:
    Description: Database secret ARN
    Value: !Ref DatabaseSecret

  ApplicationSecrets:
    Description: Application secrets ARN
    Value: !Ref ApplicationSecrets
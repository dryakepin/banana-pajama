services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: banana_pajama_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: banana_pajama
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-banana_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d banana_pajama"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - banana_pajama_network

  # Node.js API Server
  server:
    build:
      context: ../server
      dockerfile: Dockerfile
    container_name: banana_pajama_server
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: banana_pajama
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-banana_dev_password}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:8080}
      SESSION_SECRET: ${SESSION_SECRET:-dev_session_secret_change_in_production}
    volumes:
      # Mount source code for development hot reload
      - ../server:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - banana_pajama_network

  # Phaser.js Game Client (Development)
  client:
    build:
      context: ../client
      dockerfile: Dockerfile
    container_name: banana_pajama_client
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - banana_pajama_network

  # Development Tools (optional)
  adminer:
    image: adminer:latest
    container_name: banana_pajama_adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: database
    depends_on:
      database:
        condition: service_healthy
    networks:
      - banana_pajama_network

volumes:
  postgres_data:
    driver: local

networks:
  banana_pajama_network:
    driver: bridge
    name: banana_pajama_network
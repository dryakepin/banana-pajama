services:
  # PostgreSQL Database (Production)
  database:
    image: postgres:15-alpine
    container_name: banana_pajama_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-banana_pajama}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-banana_pajama}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - banana_pajama_network

  # Node.js API Server (Production)
  server:
    build:
      context: ../server
      dockerfile: Dockerfile
    container_name: banana_pajama_server_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-banana_pajama}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://yourdomain.com}
      SESSION_SECRET: ${SESSION_SECRET}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - banana_pajama_network

  # Phaser.js Game Client (Production)
  client:
    build:
      context: ../client
      dockerfile: Dockerfile
    container_name: banana_pajama_client_prod
    restart: unless-stopped
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - banana_pajama_network

  # Nginx Reverse Proxy (Production)
  nginx:
    build:
      context: ../nginx
      dockerfile: Dockerfile
    container_name: banana_pajama_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/ssl/certs
    depends_on:
      - client
      - server
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - banana_pajama_network

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local

networks:
  banana_pajama_network:
    driver: bridge
    name: banana_pajama_network_prod